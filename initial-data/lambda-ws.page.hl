/*
 * Creates a white listed Hyperlambda PGP lambda web service.
 *
 * If the initial HTTP request is of type POST, it'll act as a web service -
 * If not it will create a GUI, allowing the visitor to play around with the web service,
 * creating his own Hyperlambda, using a CodeMirror editor to write code, and see the results
 * of his evaluation in a modal window. Both modes requires you to only use the _"whitelisted"_
 * set of Active Events, and will choke if you try to use any Active Events that are not
 * _"whitelisted"_. This makes it fairly secure, and allows you to securely allow clients
 * to execute Hyperlambda on your server - Assuming you don't modify its settings, such
 * that you make it insecure.
 *
 * To allow a client to use the web service, you'll need to use _"Peeples"_ to allow for
 * a _"guest"_ account to have _"Module access"_ to _"/modules/hypereval/lambda-ws"_ - Assuming
 * you don't change its URL somehow.
 *
 * Notice, you can deny the creation of a GUI by modifying the endpoint's settings. You can
 * also modify a bunch of other settings, such as the whitelisted Active Events, etc. If you
 * choose to do the latter, I _highly recommend_ you read about how the **[eval-whitelist]**
 * event is implemented, by reading the documentation for the _"/Plugins/p5.lambda"_ project,
 * since otherwise you might unintentionally create security holes in your app. You can also
 * enforce usage of PGP to invoke it, and for instance create a list of whitelisted PGP keys,
 * only allowing these to invoke your web service, etc. In its simplest form, you can simply
 * pass in Hyperlambda as the body of your request, at which point the _"Content-Type"_ HTTP
 * header of your request must be _"application/x-hyperlambda"_. All other Content-Types will
 * be assumed to be some sort of MIME envelope, expecting to find the _entire_ MIME message in
 * the body of your request. I would encourage you to use _"application/X-MIME-Envelope"_ for
 * MIME envelopes as the _"Content-Type"_ HTTP header to make sure you stay compatible with
 * future additions to the web service endpoint.
 *
 * If you simply push Hyperlambda as the body of your request, the server will return a
 * _"Content-Type"_ of _"application/x-hyperlambda"_. If you push a MIME envelope to the server,
 * it will return a _"Content-Type"_ of _"application/X-MIME-Envelope"_, and the body of the
 * response will contain your _entire_ MIME envelope, including your top most MIME entity
 * and Content-Type.
 *
 * #### Using the web service with MIME and PGP.
 *
 * You can also transfer cryptographically signed and encrypted MIME envelopes for being executed
 * on the server, in addition to simply supplying your Hyperlambda as the body of your HTTP
 * request. If you do, each MIME entity of type "application/x-hyperlambda" will be sequentially
 * executed, and if it returns something using for instance **[return]**, will result in a returned
 * MIME entity of type _"application/x-hyperlambda"_. If you have multiple Hyperlambda snippets passed
 * into the server like this, the server will return a _"multipart/mixed"_ MIME envelope, containing
 * all of your results as children _"application/x-hyperlambda"_ leaf MIME entities. Otherwise
 * a single "application/x-hyperlambda" entity will be returned. If you pass in MIME content,
 * it is expected that you _at least cryptographically sign_ your MIME entity, using your own
 * private PGP key. If you pass in a cryptographically signed MIME envelope to be executed, and
 * you encrypt it, the signing PGP key will be used to encrypt the returned MIME entity,
 * and the entity will be cryptographically signed with the current server's private PGP key.
 *
 * If you don't encrypt your MIME envelope, the returned MIME envelope will not be encrypted.
 * But it will still be signed, and any MIME envelopes you pass in, _must_ be cryptographically
 * signed.
 *
 * You can also give specific PGP keys _"extended rights"_, by implementing a
 * **[hypereval.lambda-ws.authorize-fingerprint]** Active Event, which will be invoked with the
 * PGP key's fingerprint that was used to sign the MIME envelope as **[\_arg]**. If you choose to
 * do this, you can check the fingerprint given to your event as **[\_arg]**, and if you want to
 * give that fingerprint _extended rights_, you can return a bunch of _additional_ Active Event
 * names, that will be added to the existing rights any other callers might have. This will
 * extend the web service **[eval-whitelist]** invocation with additional keywords.
 *
 * Each MIME entity of type _"application/x-hyperlambda"_ will be sequentially executed, and
 * have anything they somehow return serialized back to caller in a MIME entity. If an exception
 * occurs during execution of one of your MIME entities, a MIME header for that specific return
 * MIME entity called _"X-Exception"_ will be found in the MIME entity, containing the type of
 * exception - At which point the exception's error message can be found as the content of your
 * MIME entity, and the returned MIME entity for that particular Hyperlambda snippet will be
 * _"text/plain"_.
 *
 * You can also _identity_ each of your _"application/x-hyperlambda"_ MIME entities, passing in
 * an **[X-Hyperlambda-ID]** MIME header for that specific part, which will be returned to you
 * in your _"application/x-hyperlambda"_ returned MIME leaf entity, allowing you to identify
 * which MIME entity returned what. If your Hyperlambda snippet does not return anything,
 * then _"SUCCESS"_ will be returned as the content of a _"text/plain"_ part, with the
 * _"X-Hyperlambda-ID"_ of your currently iterated snippet - Assuming your Hyperlambda did
 * not create an exception during execution.
 *
 * If your snippet returns a simple value, a _"text/plain"_ MIME entity will be returned
 * containing your content. If it returns lambda, an _"application/x-hyperlambda"_ MIME entity
 * will be returned.
 *
 * You can also reference attachments in your MIME envelope, since the entire **[p5.web.request.parse-mime]**
 * invocation's result is passed into your Hyperlambda snippets as a **[mime]** argument by
 * reference. Allowing you to de-reference any files passed into the web service. You can
 * also return files, since also a **[result]** argument is passed into your Hyperlambda,
 * allowing you to create MIME entites yourself, that can contain for instance **[filename]**
 * arguments, etc. At which point you'll obviously need to have read access to these files.
 * The latter you can accomplish by whitelisting e.g. **[login]**, giving your user context
 * extended rights, assuming you have a user on the server where you're trying to execute
 * your Hyperlambda. If you choose to whitelist **[login]**, you should definitely make sure
 * you encrypt all your MIME envelopes, since otherwise you'd be submitting your password in
 * clear text over the wire.
 */


/*
 * If this is true, a GUI will be created if the initial HTTP request is not of type POST.
 * If it is false, an exception will be raised if the client tries to access it using anything but
 * a POST request.
 */
.gui-allowed:bool:true


/*
 * If this value is false, the web service allows for executing unsigned web service invocations.
 * If this value is true, the web service only allows for PGP cryptographically signed invocations.
 *
 * If the server receives a MIME invocation, that is signed, it will yield
 * its return as such, encrypting for the key that was used to sign the invocation, and signing
 * with its own server key.
 */
.force-pgp:bool:false

  /*
   * If this contains at least one value, it acts as a list of whitelisted PGP fingerprints,
   * and will only allow invocations of Hyperlambda that is cryptographically signed with
   * one of the given fingerprints.
   */
  whitelisted-pgp-keys

    /*
     * Example of allowing ONLY the specified PGP fingerprints.
     *
     * Uncomment and modify the value of the node below to whatever PGP key you want to whitelist.
     * You can add as many [fingerprint] arguments as you wish. However, a caller must exist in the list of
     * whitelisted fingerprints to be accepted - Unless your list is empty, at which point all
     * PGP keys are accepted.
     *
     * This allows you to restrict usage of web service to only MIME messages signed with one
     * of the given keys. Notice, if you want to use this feature, you'll have to set the above
     * [.force-pgp] to true.
     */
    // fingerprint:83bfcbe0235f90e0a67bb865863a22266f9ef39a


/*
 * List of legal Active Events.
 *
 * Modify this according to your own needs.
 */
.events
  set
  add
  insert-before
  insert-after
  src
  +
  -
  /
  *
  for-each
  continue
  break
  return
  eval-x
  switch
  case
  default
  try
  catch
  finally
  if
  else-if
  else
  fetch
  starts-with
  ends-with
  index-of
  join
  length
  replace
  split
  throw
  to-lower
  to-upper
  trim
  trim-left
  trim-right
  =
  !=
  >
  <
  >=
  <=
  ~
  !~
  hyper2lambda
  lambda2hyper


/*
 * Parametrising all [eval-whitelist] invocations with our list of
 * white-washed events.
 */
add:x:/../**/eval-whitelist/*/events
  src:x:/@.events/*


/*
 * Checking if this is a web service invocation or not.
 */
p5.web.request.get-method
if:x:/-?value
  =:POST

  /*
   * Web service invocation!
   */

  /*
   * Checking type of request, which might be "application/x-hyperlambda", at which
   * point we execute it directly as such, assuming server allows for executing unencrypted
   * invocations.
   *
   * Otherwise we assume it is some sort of MIME message.
   */
  p5.web.header.get:Content-Type
  if:x:/@p5.web.header.get/0?value
    =:application/x-hyperlambda

    /*
     * Checking if we're allowed to execute Hyperlambda that is not cryptographically
     * signed, and if not we return an "access denied" to caller.
     */
    if:x:/@.force-pgp?value
      =:bool:true

      /*
       * Web service endpoint requires the caller to transmit PGP encrypted and signed
       * Hyperlambda.
       */
      p5.web.response.set-status-code:403
      p5.web.header.set:Content-Type
        src:application/X-MIME-Envelope
      p5.web.echo:This web service endpoints requires the caller to use PGP.
      return

    /*
     * Retrieving body of request, and executing it using [eval-whitelist].
     */
    p5.web.request.get-body
    eval-whitelist:x:/-
      events

    /*
     * Checking type of return.
     */
    if:x:/@eval-whitelist/*
      not

      /*
       * Simple value return.
       */
      p5.web.header.set:Content-Type
        src:text/plain
      p5.web.echo:x:/@eval-whitelist?value

    else

      /*
       * Lambda return.
       */
      lambda2hyper:x:/@eval-whitelist/*
      p5.web.header.set:Content-Type
        src:application/x-hyperlambda
      p5.web.echo:x:/@lambda2hyper?value

  else

    /*
     * A MIME web service invocation.
     *
     * Parsing MIME message, which might have been cryptographically signed and/or encrypted.
     * The default implementation for decrypting MIME envelopes, is to use the server's PGP key,
     * so we don't need to provide an explicit key.
     *
     * If you wish to use another PGP key to decrypt your envelopes, you can add a [fingerpint]
     * and a [password] to the invocation below.
     *
     * Notice, the [content-type-in-body] is necessary to inform the MIME parser that the "Content-Type"
     * can be found in the body of the request, and not in its HTTP "Content-Type" header.
     *
     * Making sure we store any attachments in user's "temp" folder.
     */
    p5.web.request.parse-mime
      content-type-in-body:true
      attachment-folder:~/temp/

    /*
     * Storing all file attachments, such that we're able to delete them when invocation is done.
     */
    .files
    for-each:x:/@p5.web.request.parse-mime/**/Content-Disposition/=~attachment;/./*/filename
      add:x:/@.files
        src:{0}{1}{2}
          :x:/@_dp/#/*/folder?value
          :x:/@_dp/#/*/prefix?value
          :x:/@_dp/#?value

    /*
     * To make sure we're able to delete any temporary files submitted by caller, even if an
     * exception occurs, we wrap the rest of our logic in a try/catch block.
     */
    try

      /*
       * Verifying that the the envelope was cryptographically signed.
       */
      if:x:/@p5.web.request.parse-mime/*/*/signature
        not

        /*
         * Not signed.
         */
        p5.web.response.set-status-code:401
        p5.web.header.set:Content-Type
          src:application/X-MIME-Envelope
        p5.web.echo-mime
          text:plain
            content:You need to cryptographically sign your MIME envelope.
        return

      /*
       * Verifying that the PGP signature was verified.
       */
      if:x:/@p5.web.request.parse-mime/*/*/signature/*?value
        !=:bool:true

        /*
         * Signature of MIME envelope did not verify.
         */
        p5.web.response.set-status-code:401
        p5.web.header.set:Content-Type
          src:application/X-MIME-Envelope
        p5.web.echo-mime
          text:plain
            content:Your PGP signature did not verify correctly.
        return

      /*
       * Checking if endpoint is configured to only allow for some specific PGP signatures
       * to be used.
       */
      if:x:/@.force-pgp/*/whitelisted-pgp-keys/*

        /*
         * One or more PGP keys have been whitelisted, checking that envelope was signed
         * by one of these keys.
         */
        if:x:/@.force-pgp/*/whitelisted-pgp-keys/*/={0}
          :x:/@p5.web.request.parse-mime/*/*/signature/*/*/fingerprint?value
          not

          /*
           * Fingerprint was not accepted.
           */
          p5.web.response.set-status-code:401
          p5.web.header.set:Content-Type
            src:application/X-MIME-Envelope
          p5.web.echo-mime
            text:plain
              content:The PGP key you used to sign your request with is not accepted by this server.
          return

      /*
       * Invoking plugin event to see if the sigature PGP key has additional rights on the server.
       *
       * This is a non-existing Active Event that allows you to create a callback returning a bunch
       * of Active Event names according to the [fingerprint] of the PGP key that was used to sign
       * the MIME envelope.
       *
       * If you return Active Event names in this event, these will be ADDED as extended execution rights
       * for that specific fingerprint. This allows you to have specific fingerprints, implying PGP keys,
       * to use additional Active Events in their Hyperlambda content.
       */
      hypereval.lambda-ws.authorize-fingerprint:x:/@p5.web.request.parse-mime/*/*/signature/*/*/fingerprint?value
      add:x:/./*/for-each/*/try/*/eval-whitelist/*/events
        src:x:/@hypereval.lambda-ws.authorize-fingerprint/*

      /*
       * Iterating through each "application/x-hyperlambda" part from MIME envelope.
       *
       * Notice, this is done to allow for evaluating multiple Hyperlambda snippets in one go.
       */
      .result
      for-each:x:/@p5.web.request.parse-mime/**/application/=x-hyperlambda/*/content

        /*
         * Making sure we wrap execution in a try/catch block, in case an exception occurs during
         * execution, such that we're able to return intelligent feedback to caller.
         */
        try

          /*
           * Evaluating currently iterated "application/x-hyperlambda" MIME entity.
           *
           * Notice, to allow caller to gain access to files and such that were transmitted
           * as attachments, we pass in the entire [p5.web.request.parse-mime] node to evaluation
           * as a reference node argument.
           *
           * Also notice, that to allow caller to access the result node directly, to add for instance
           * file attachments, etc - We also pass in the [.result] node directly by reference to evaluation,
           * such that the caller can modify it himself, as he see fit, and add for instance a [filename] type
           * of MIME entity to it.
           */
          eval-x:x:/+/*(/mime|/result)
          eval-whitelist:x:/@_dp/#
            mime:x:/@p5.web.request.parse-mime
            result:x:/@.result
            events

          /*
           * Checking type of return.
           *
           * Notice, we only create a result node if currently iterated Hyperlambda snippet
           * actually returned something.
           */
          if:x:/@eval-whitelist?value

            /*
             * Simple value return.
             */
            eval-x:x:/+/*/*/*/content
            add:x:/@.result
              src
                text:plain
                  content:x:/@eval-whitelist?value

          else-if:x:/@eval-whitelist/*

            /*
             * Lambda return.
             */
            add:x:/+/*/*/*/content
              src:x:/@eval-whitelist/*
            add:x:/@.result
              src
                application:x-hyperlambda
                  content

          else

            /*
             * No return value.
             */
            add:x:/@.result
              src
                text:plain
                  content:SUCCESS

          /*
           * Adding any "X-Hyperlambda-ID" headers in currently iterated MIME entity back to
           * caller, to allow him to uniquely identify each returned MIME entity easily.
           */
          add:x:/@.result/0/-
            src:x:/@_dp/#/./*/X-Hyperlambda-ID

        catch

          /*
           * Exception occurred during execution of currently iterated lambda, making sure
           * we return intelligent feedback to caller explaining what went wrong.
           */
          eval-x:x:/+/*/*/*
          add:x:/@.result
            src
              text:plain
                X-Exception:x:/..catch/*/type?value
                content:x:/..catch/*/message?value

      /*
       * Adding all [.result] nodes to echo MIME invocation, making sure we only return
       * a simple (but encrypted and signed) "application/x-hyperlambda" entity if there's
       * only one entity - Otherwise returning all entities as "multipart/mixed".
       */
      if:x:/@.result/*?count
        =:int:1

        /*
         * Single part MIME entity return.
         */
        add:x:/..try/*/p5.web.echo-mime
          src:x:/@.result/*

      else-if:x:/@.result/*?count
        >:int:1

        /*
         * Multipart MIME entity return.
         */
        add:x:/..try/*/p5.web.echo-mime
          src
            multipart:mixed
        add:x:/..try/*/p5.web.echo-mime/*
          src:x:/@.result/*

      else-if:x:/@.result/*?count
        =:int:0

        /*
         * None of the Hyperlambda snippets actually returned anything.
         */
        add:x:/..try/*/p5.web.echo-mime
          src
            text:plain
              content:No code were supplied!

      /*
       * Cryptographically signing the returned MIME envelope with our server key.
       *
       * If you wish to use another PGP key to sign your envelopes, you can add a [fingerprint]
       * and a [password] to the [sign] argument below.
       */
      eval-x:x:/+/*/*/*/fingerprint
      add:x:/..try/*/p5.web.echo-mime/*
        src
          sign

      /*
       * Checking if caller encrypted his request, and if so, we encrypt the return value.
       */
      if:x:/@p5.web.request.parse-mime/*?name
        =:multipart
        and:x:/@p5.web.request.parse-mime/*?value
          =:encrypted
        add:x:/..try/*/p5.web.echo-mime/*
          src
            encrypt
              fingerprint:x:/@p5.web.request.parse-mime/*/*/signature/*/*/fingerprint?value

      /*
       * Echoing MIME envelope to caller, making sure we create a custom HTTP header
       * to signal type of response.
       */
      p5.web.header.set:Content-Type
        src:application/X-MIME-Envelope
      p5.web.echo-mime

    finally

      /*
       * Deleting all file attachments from MIME message to clean up after invocation.
       */
      for-each:x:/@.files/*?name

        /*
         * Checking that file exists since it might have been explicitly deleted by caller.
         */
        if
          fetch:x:/0/0?value
            file-exists:x:/@_dp?value

          /*
           * Temporary file still exists, hence deleting it.
           */
          delete-file:x:/@_dp?value

  /*
   * Returning early to avoid evaluating the rest of our file.
   */
  return


/*
 * Checking that the settings for endpoint allows for creating a GUI wrapper.
 */
if:x:/@.gui-allowed?value
  !=:bool:true

  /*
   * GUI not allowed.
   */
  p5.web.response.set-status-code:405
  p5.web.echo:Sorry, this is a web service and does not allow for being loaded as anything else.
  return


/*
 * Creates a GUI wrapper for our web service.
 */
p5.web.page.set-title:PGP/lambda web service
join:x:/@.events/*
  sep:</li><li>
create-widget
  class:container
  oninit

    /*
     * Including Micro CSS file, serious skin, and fonts.
     */
    micro.css.include

  widgets
    div
      class:row
      widgets
        div
          class:col
          widgets
            h1
              innerValue:Lambda PGP Web Service endpoint

            /*
             * CodeMirror instance.
             */
            micro.widgets.codemirror:hyperlambda
              mode:hyperlambda
              auto-focus:true
            div
              class:right
              widgets
                button
                  innerValue:Execute
                  onclick

                    /*
                     * Retrieves code, executes it, and creates a modal window with
                     * the results of the execution.
                     */
                    micro.widgets.codemirror.get-value:hyperlambda
                    hyper2lambda:x:/-/*?value
                    eval-whitelist:x:/-
                      events

                    /*
                     * Checking type of return.
                     */
                    .result
                    if:x:/@eval-whitelist/*
                      not

                      /*
                       * Simple value return.
                       */
                      set:x:/@.result?value
                        src:x:/@eval-whitelist?value

                    else

                      /*
                       * Lambda return.
                       */
                      lambda2hyper:x:/@eval-whitelist/*
                      set:x:/@.result?value
                        src:x:/@lambda2hyper?value

                    /*
                     * Creates our modal window displaying results.
                     */
                    eval-x:x:/+/*/*/*/*
                    create-widgets
                      micro.widgets.modal
                        widgets
                          pre
                            innerValue:x:/@.result?value
            h3
              innerValue:Editing code in the Hyperlambda code editor
            p
              innerValue:@"To edit code, and play around with web service contructs, simply create your code in the above
CodeMirror editor. Notice, only 'whitelisted' events will be legally allowed to execute. Se further down on page to see which
events are whitelisted. Use Ctrl+Space or Cmd+Space to show code AutoCompletion."
            h3
              innerValue:Enabling the web service
            p
              innerValue:@"In order to allow clients to connect to the web server, you'll need to use 'Peeples' to open it up for the 'guest' account,
which you can do with the following access object."
            pre
              innerValue:@"*
  p5.module.allow:/modules/hypereval/lambda-ws/"
            h3
              innerValue:Enabling clients to download your PGP key
            p
              innerValue:@"In order to allow clients to download your server's PGP key, you'll need to use 'Peeples' to open up access to it,
which you can do with the following access object."
            pre
              innerValue:@"*
  p5.module.allow:/modules/micro/pgp/"
            h3
              innerValue:Consuming Web Service
            p
              innerValue:@"To invoke web service, instead of creating a GUI, make sure you submit an HTTP POST request,
such as the following example illustrates."
            pre
              innerValue
              oninit
                p5.web.get-location-url
                set-widget-property:x:/../*/_event?value
                  innerValue:@"p5.http.post:""{0}""
  Content-Type:application/x-hyperlambda
  content
    +:int:7
      *:int:20
        _:10
    eval-x:x:/+/*
    return
      result:x:/@+?value"
                    :x:/@p5.web.get-location-url?value
            p
              innerValue:@"To invoke web service using a PGP encrypted and cryptographically signed MIME envelope from Hyperlambda,
make sure you submit an HTTP POST request, such as the following example illustrates - At which point the web service
will return its results as a PGP encrypted and signed MIME envelope."
            pre
              innerValue
              oninit
                p5.web.get-location-url
                p5.auth.pgp.get-fingerprint
                set-widget-property:x:/../*/_event?value
                  innerValue:@"p5.http.post:""{0}""
  .onrequest
    .p5.mime.serialize-to-stream
      application:x-hyperlambda

        /*
         * Signing with your server's PGP key.
         */
        sign

        /*
         * Encrypting with this server's public PGP key.
         */
        encrypt
          fingerprint:{1}

        /*
         * The actual Hyperlambda content of your request.
         */
        content
          split:Thomas Hansen is pretty cool
            =:"" ""
          add:x:/+
            src:x:/@split/*?name
          return
  .onresponse
    .p5.mime.load-from-stream"
                    :x:/@p5.web.get-location-url?value
                    :x:/@p5.auth.pgp.get-fingerprint?value
            p
              innerValue:@"If you choose to create a MIME envelope and cryptographically sign it, with your PGP key, you can also transmit
multiple <strong>[application:x-hyperlambda]</strong> entities, and they will be evaluated in order of appearance (breath first), and
have the value of their execution returned in order of appearance. Evaluating a PGP cryptographcally signed web service will also give
you access to the entire MIME envelope inside of your own Hyperlambda as a <strong>[mime]</strong> reference argument, being the entire mime parsing node
passed in as a reference node, allowing you to gain access to file attachments and such, which you can also pass in to the web service
as you see fit. Any file attachments will have their names 'randomised' and be stored in the <em>""/common/temp/""</em> folder."
            p
              innerValue:@"You can also of course use CURL or other types of clients, as long as you pass in valid Hyperlambda, and make
sure you set the 'Content-Type' HTTP header correctly to 'application/x-hyperlambda', assuming you want to pass in your code as clear text, and not
cryptographically signed or encrypted."
            p
              innerValue:@"If you choose to supply multiple 'application/x-hyperlambda' MIME parts, you'll obviously have to wrap
them somehow inside of some sort of 'multipart'."
            p
              innerValue
              oninit
                p5.web.get-root-location
                set-widget-property:x:/../*/_event?value
                  innerValue:@"To retrieve the public PGP key for this server, <a href=""{0}micro/pgp/"" target=""_blank"">visit this link</a>"
                    :x:/@p5.web.get-root-location?value
            h3
              innerValue:Configuring the web service
            p
              innerValue:@"The web service can be configured with all sorts of different settings, such as for instance only allowing
one or more specified PGP keys to be able to invoke it, changing the whitelisted event list, etc, etc, etc. See its code using for instance
'Hypereval' for details about this."
            h3
              innerValue:Legal Active Events
            ul
              innerValue:<li>{0}</li>
                :x:/@join?value
            p
              innerValue:@"See the Hyperlambda code in Hypereval for more information about how to consume and configure the web service."