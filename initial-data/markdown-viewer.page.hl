/*
 * Including Micro CSS files.
 */
micro.css.include

/*
 * Creating wireframe that will contain our Markdown content.
 */
create-widget
  class:container
  widgets
    text:@"
<style>
@media print {
html{
    background-image: none;
    font-size:1rem;
}
}
.CodeMirror {
    margin-top:2rem;
    margin-bottom:2rem;
}
</style>"
    div
      class:row
      widgets
        div
          class:col
          widgets
            container:markdown-viewer-content
              oninit

                /*
                 * Retrieving HTTP QUERY parameter to figure out which folder
                 * or file the client wants to display.
                 */
                p5.web.query.get:path

                /*
                 * Checking if path is a folder or a file.
                 */
                if
                  ends-with:x:/@p5.web.query.get/*?value
                    src:/

                  /*
                   * Path is a folder.
                   *
                   * Listing all files, loading files, and converting them to HTML,
                   * for then to display them to user.
                   */
                  list-files:x:/@p5.web.query.get/*?value
                    filter:.md
                  for-each:x:/@list-files/*?name

                    /*
                     * Loading file and converting it to HTML.
                     */
                    load-file:x:/@_dp?value
                    markdown2html:x:/@load-file/*?value

                    /*
                     * Making sure we transform all YouTube links, such that they're replaced by
                     * a preview of the video.
                     */
                    html2lambda:x:/@markdown2html?value
                    for-each:x:@"/@html2lambda/*/p/*/#text/""=:regex:/^https:\\/\\/www.youtube.com\\/watch/"""

                      /*
                       * Replacing entire paragraph with a preview of YouTube video.
                       */
                      split:x:/@_dp/#?value
                        =:?v=
                      split:x:/@split/0/-?name
                        =:&
                      eval-x:x:/+/**/\@src
                      insert-before:x:/@_dp/#/.
                        src
                          div
                            div
                              iframe
                                @type:text/html
                                @allowfullscreen
                                @src:@"https://www.youtube.com/embed/{0}?modestbranding=1&autohide=1&showinfo=0"
                                  :x:/@split/0?name
                      set:x:/@_dp/#/.

                    /*
                     * Making sure we transform all images linked to in paragraphs, such that they're replaced by
                     * an img HTML tag.
                     */
                    for-each:x:@"/@html2lambda/*/p/*/#text/""=:regex:/^https{0,1}:\\/\\/.+\\.[png|jpg|jpeg|gif|svg]/i"""

                      /*
                       * Replacing entire paragraph with an image tag.
                       */
                      eval-x:x:/+/*/*/*
                      insert-before:x:/@_dp/#/.
                        src
                          img
                            @style:@"max-width:100%;margin-left:auto;margin-right:auto;display:block;margin-top:2rem;margin-bottom:2rem;"
                            @src:x:/@_dp/#?value
                            alt:Image
                      set:x:/@_dp/#/.

                    /*
                     * Making sure we transform all code to use CodeMirror in "read only" mode,
                     * to allow syntax highlighting of code examples.
                     */
                    for-each:x:/@html2lambda/*/pre/*/code/*/#text

                      /*
                       * First retrieving language mode of code.
                       */
                      replace:x:/@_dp/#/./*/\@class?value
                        src:language-
                      eval-x:x:/+
                      .language:x:/@replace?value

                      /*
                       * Making sure we use a unique ID for our CodeMirror instance.
                       */
                      p5.types.guid.new
                      replace:x:/-?value.string
                        src:-

                      trim-right:x:/@_dp/#?value
                      eval-x:x:/+/*/*/*
                      insert-before:x:/@_dp/#/./.
                        src
                          textarea
                            @id:x_{0}
                              :x:/@replace?value
                            @disabled
                            #text:x:/@trim-right?value
                      set:x:/@_dp/#/./.
                      .defaults
                        theme:phosphorus
                      p5.auth.my-settings.get
                      micro.widgets.codemirror._include-javascript

                      /*
                       * Notice, special handling of "htmlmixed" mode, to also include XML, CSS and JavaScript.
                       */
                      if:x:/@.language?value
                        =:htmlmixed
                        p5.web.include-javascript-file:@MICRO/media/codemirror/mode/htmlmixed/htmlmixed.js
                        p5.web.include-javascript-file:@MICRO/media/codemirror/mode/xml/xml.js
                        p5.web.include-javascript-file:@MICRO/media/codemirror/mode/javascript/javascript.js
                        p5.web.include-javascript-file:@MICRO/media/codemirror/mode/css/css.js
                      else
                        p5.web.include-javascript-file:@MICRO/media/codemirror/mode/{0}/{0}.js
                          :x:/@.language?value
                      micro.widgets.codemirror._include-css
                      p5.web.include-css-file:@MICRO/media/codemirror/theme/{0}.css
                        :x:(/@p5.auth.my-settings.get/*/codemirror/*/theme|/@.defaults/*/theme)/$?value
                      micro.widgets.codemirror._include-auto-complete
                      p5.web.send-javascript:@"p5['x_{0}'] = CodeMirror.fromTextArea(p5.$('x_{0}').el, {{
mode:'{1}',
theme:'{2}',
lineNumbers:true,
readOnly:true,
styleActiveLine:true,
path:'/micro/media/codemirror/',
autofocus:false,
viewportMargin: Infinity
}});
p5['x_{0}'].setSize('100%', 'auto');
"
                        :x:/@replace?value
                        :x:/@.language?value
                        :x:(/@p5.auth.my-settings.get/*/codemirror/*/theme|/@.defaults/*/theme)/$?value

                    /*
                     * Adding a widget encapsulating HTML output,
                     * and appending it to [widgets] collection of our output container
                     * widget.
                     */
                    lambda2html:x:/@html2lambda/*
                    create-widget
                      element:div
                      parent:markdown-viewer-content
                      innerValue:x:/@lambda2html?value
