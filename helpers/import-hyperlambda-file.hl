/*
 * Imports a single Hyperlambda file into snippets database.
 *
 * Expects __[file]__ being the fully qualified filename of Hyperlambda file to import,
 * in addition to an open database connection to the Hypereval database.
 *
 * Notice, the filename has a convention, which is _"snippet.name.foo.xxx.hl"_,
 * where _"xxx"_ is its _"type"_, which normally can be any of the given values.
 *
 * - _"snippet"_ - Default value, simply a normal snippet
 * - _"page"_ - A page type of snippet, that can be _"launched"_ using Hypereval's URL resolver
 * - _"startup"_ - A startup Hypereval snippet, that will be automatically evaluated every time the web server process is started
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  file:string





/*
 * Verify that caller is not trying to import something that's not a Hyperlambda file.
 */
if
  ends-with:x:/../*/file?value
    src:.hl
  not

  /*
   * Oops, not a Hyperlambda file.
   */
  throw:'{0}' is an unsupported file type
    :x:/../*/file?value





/*
 * Figuring out file type and snippet's name.
 *
 * Notice, we do this by removing the file extension, and the snippet's type declaration,
 * which are supposed to be a part of the snippet's filename by convention.
 */
_type
split:x:/../*/file?value
  =:/
split:x:/@split/0/-?name
  =:.
set:x:/@_type?value
  src:x:/@split/0/-2?name
set:x:/@split/0(/-2|/-)
join:x:/@split/*
  sep:.





/*
 * Loads file, without conversion, to make sure we keep comments.
 */
load-file:x:/../*/file?value
  convert:false





/*
 * Inserting our new snippet.
 */
p5.mysql.insert:@"insert into snippets (name, content, type) values (@name, @content, @type) on duplicate key update content = @content, type = @type"
  @name:x:/@join?value
  @content:x:/@load-file/*?value
  @type:x:/@_type?value
