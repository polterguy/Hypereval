/*
 * File responsible for starting "Hypereval".
 *
 * This file is evaluated when the user clicks the "desktop icon" for the "Hypereval" app.
 */





/*
 * Figuring out skin to use, and other settings.
 */
.defaults
  skin:serious
select-data:x:/*/*/micro.codemirror.settings





/*
 * Checking if this is a request for a specific page.
 */
split:x:/../*/url?value
  =:?
split:x:/@split/0?name
  =:/
if:x:/@split/*?count
  >:int:1
  and:x:/@split/1?name
    !=:upload
  p5.mysql.connect:[hypereval]
    p5.mysql.select:@"select content from snippets where name = @name and type = 'page'"
      @name:x:/@split/1?name

    /*
     * Verifying page actually exists.
     */
    if:x:/@p5.mysql.select/*
      not

      /*
       * No such page.
       */
      p5.web.response.set-status-code:404
      p5.web.echo:This is where URLs goes to die ...
      return

    /*
     * Transforming Hyperlambda into lambda and evaluating it, before we return early,
     * to avoid evaluation of the rest of the file.
     */
    hyper2lambda:x:/@p5.mysql.select/*/*/content?value
    eval:x:/@hyper2lambda
    return





/*
 * Including Micro, selected skin, font CSS file, and main CSS file for Hypereval.
 */
eval-x:x:/+/*
micro.css.include
  skin:x:(/@select-data/*/*/skin|/../*/.defaults/*/skin)/$?value
p5.web.include-css-file:@HYPEREVAL/media/main.css





/*
 * Checking if this is an upload request.
 */
if:x:/@split/0/-?name
  =:upload

  /*
   * Parsing MIME message, and reading file, and stuffing content into session.
   *
   * Notice, we have different logic for zip files here.
   */
  p5.web.request.parse-mime
    attachment-folder:~/temp/

  /*
   * Checking what type of file this is.
   * Candidates are .zip and .hl.
   */
  split:x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
    =:.
  if:x:/@split/0/-?name
    =:zip

    /*
     * Zip file.
     *
     * Making sure we create our temporary folder, which will be tha destination
     * for our unzip operation.
     */
    if
      fetch:x:/0/0?value
        folder-exists:~/temp/hypereval/
      not
      create-folder:~/temp/hypereval/

    /*
     * Deleting any previous files found in our temporary unzip folder.
     */
    list-files:~/temp/hypereval/
    delete-file:x:/-/*?name

    /*
     * Unzipping file.
     */
    unzip:{0}{1}{2}
      :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/folder?value
      :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
      :x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
      dest:~/temp/hypereval/

    /*
     * Used to track how many files we are importing, to give feedback to client
     * after import is done.
     */
    _count:int:0

    /*
     * Connecing to database, and looping through each file, inserting content
     * as a new snippet.
     */
    p5.mysql.connect:[hypereval]
      for-each:x:/@unzip/*?name

        /*
         * Verifying currently iterated unzipped file is a Hyperlambda file.
         */
        if
          ends-with:x:/@_dp?value
            src:.hl
          not
          continue

        /*
         * Incrementing file counter.
         */
        set:x:/@_count?value
          +:x:/@_count?value
            _:1

        /*
         * Used to hold file type, candidates are "page", "startup" and nothing,
         * which implies plain snippet.
         */
        _type

        /*
         * Figuring out file type, first finding only filename, then its extension.
         */
        split:x:/@_dp?value
          =:/
        split:x:/@split/0/-?name
          =:.

        /*
         * Checking if filename contains a snippet type ("page", "startup").
         */
        if:x:/@split/*?count
          =:int:3
          set:x:/@_type?value
            src:x:/@split/0/-2?name

        /*
         * Loads file, without conversion, to make sure we keep comments.
         */
        load-file:x:/@_dp?value
          convert:false

        /*
         * Deleting any old snippets with the same name.
         */
        p5.mysql.delete:@"delete from snippets where name = @name"
          @name:x:/@split/0?name

        /*
         * Inserting our new snippet.
         */
        p5.mysql.insert:@"insert into snippets (name, content, type) values (@name, @content, @type)"
          @name:x:/@split/0?name
          @content:x:/@load-file/*?value
          @type:x:/@_type?value

    /*
     * Storing our file count, such that we can later display it to user.
     * In addition to file type.
     */
    p5.web.session.set:hypereval.snippet-import-count
      src:x:/@_count?value
    p5.web.session.set:hypereval.file-type
      src:zip

  else

    /*
     * Hyperlambda file.
     */
    load-file:{0}{1}{2}
      :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/folder?value
      :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
      :x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
      convert:false
    p5.web.session.set:hypereval.uploaded-file
      src:x:/@load-file/*?value
    split:x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
      =:.
    p5.web.session.set:hypereval.snippet-name
      src:x:/@split/0?name
    p5.web.session.set:hypereval.code
      src:x:/@load-file/*?value
    p5.web.session.set:hypereval.file-type
      src:hl

  /*
   * Returning early to avoid evaluation of the rest of our file.
   */
  p5.web.echo:SUCCESS
  return





/*
 * Checking if this is a "chrome less" instantiation.
 */
if:x:/../*/chrome?value
  =:bool:false

  /*
   * Removing "chrome", instantiating module as a "plugin".
   */
  set:x:/../*/create-widget/*/widgets/*/div/[0,1]
  add:x:/../*/create-widget/**/hypereval.widgets.eval
    src
      chrome:bool:false





/*
 * Creating main content container, making sure we set the title of our page.
 */
p5.web.page.set-title:Hypereval
create-widget:hypereval-main-container
  class:container
  widgets
    div
      class:row
      widgets
        div
          class:col-100
          widgets
            h3
              innerValue:Hypereval
              style:"float:left;"
              events

                /*
                 * Sets the header text of module.
                 */
                hypereval.set-header
                  if:x:/../*/_arg?value
                    and:x:/../*/_arg?value
                      !=:
                    set-widget-property:x:/../*/_event?value
                      innerValue:Hypereval <small>{{{0}}}</small>
                        :x:/../*/_arg?value
                  else
                    set-widget-property:x:/../*/_event?value
                      innerValue:Hypereval

            div
              class:right
              widgets
                div
                  class:strip toolbar
                  style:"display:inline-block;"
                  widgets

                    button
                      innerValue:@"<span class=""icon-cog""></span>"
                      title:Settings
                      onclick

                        /*
                         * Showing settings for CM to user.
                         */
                        micro.codemirror.settings

                    /*
                     * Download Hyperlambda button.
                     */
                    button:hypereval-download-button
                      innerValue:@"<span class=""icon-download2""></span>"
                      title:Download snippet
                      onclick

                        /*
                         * Creates a temporary file containing Hyperlambda, 
                         * and allows user to download it to his client.
                         */
                        .defaults
                          hypereval.snippet-name:hypereval
                          type
                        p5.web.session.get:hypereval.snippet-name
                        if:x:/@p5.web.session.get/*?value
                          p5.mysql.connect:[hypereval]
                            p5.mysql.scalar:@"select type from snippets where name = @name"
                              @name:x:/@p5.web.session.get/*?value
                            if:x:/@p5.mysql.scalar?value
                              set:x:/@.defaults/*/type?value
                                src:.{0}
                                  :x:/@p5.mysql.scalar?value
                        get-widget-property:hypereval-input
                          innerValue

                        /*
                         * Checking if there is any code at all in current view.
                         */
                        if
                          trim:x:/@get-widget-property/*/*?value
                          =:

                          /*
                           * No code in editor.
                           */
                          micro.windows.info:There is no code in your Hyperlambda editor
                            class:micro-windows-info warning
                          return

                        save-file:~/temp/hypereval-code.hl
                          src:x:/@get-widget-property/*/*?value
                        eval-x:x:/+/*/Content-Disposition
                        micro.download.file:~/temp/hypereval-code.hl
                          Content-Type:x-application/hyperlambda
                          Content-Disposition:@"attachment; filename=""{0}{1}.hl"""
                            :x:(/@p5.web.session.get/*/hypereval.snippet-name|/@.defaults/*/hypereval.snippet-name)/$?value
                            :x:/@.defaults/*/type?value

                    /*
                     * Upload Hyperlambda button.
                     */
                    button
                      innerValue:@"<span class=""icon-upload2""></span>"
                      title:Upload snippet
                      onclick:@"p5.dropzone.browse();event.stopPropagation(true);return false;"

                    /*
                     * Export all snippets button.
                     */
                    button
                      innerValue:@"<span class=""icon-file-zip""></span>"
                      style:"margin-bottom:0;"
                      title:Exports snippets
                      onclick

                        /*
                         * Exports all snippets to a zip file.
                         *
                         * First we make sure our temp folder exists, and
                         * if it does, we empty it for any previous files.
                         */
                        if
                          fetch:x:/0/0?value
                            folder-exists:~/temp/hypereval/
                          not
                          create-folder:~/temp/hypereval/

                        /*
                         * Deleting all folders and files in our temporary folder.
                         */
                        list-files:~/temp/hypereval/
                        delete-file:x:/-/*?name
                        list-folders:~/temp/hypereval/
                        delete-folder:x:/-/*?name

                        /*
                         * Then we select all snippets, and create on Hyperlambda file
                         * for each, and save to our temporary folder.
                         */
                        p5.mysql.connect:[hypereval]
                          p5.mysql.select:@"select * from snippets"
                          for-each:x:/@p5.mysql.select/*
                            _type
                            if:x:/@_dp/#/*/type?value
                              set:x:/@_type?value
                                src:.{0}
                                  :x:/@_dp/#/*/type?value
                            save-file:~/temp/hypereval/{0}{1}.hl
                              :x:/@_dp/#/*/name?value
                              :x:/@_type?value
                              src:x:/@_dp/#/*/content?value

                        /*
                         * Creating a zip file of entire folder, and downloading
                         * it to client.
                         */
                        if
                          fetch:x:/0/0?value
                            file-exists:~/temp/hypereval-export.zip
                          delete-file:~/temp/hypereval-export.zip
                        zip:~/temp/hypereval-export.zip
                          src:~/temp/hypereval/
                        micro.download.file:~/temp/hypereval-export.zip
                          Content-Type:application/zip
                          Content-Disposition:@"attachment; filename=""hypereval-export.zip"""

                    button
                      innerValue:@"<span class=""icon-home3""></span>"
                      title:Close Hypereval
                      onclick

                        /*
                         * Redirecting user to server's root URL.
                         */
                        p5.web.get-root-location
                        p5.web.set-location:x:/-?value

    div
      class:row
      widgets
        div:hypereval-codemirror-wrapper
          class:col-100
          widgets
            hypereval.widgets.eval
