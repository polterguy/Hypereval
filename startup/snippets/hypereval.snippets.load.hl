/*
 * Creates the __[hypereval.snippets.load]__ Active Event that retrieves the Hyperlambda
 * for the snippet(s) with the specified __[\_arg]__ name(s).
 *
 * This event will return the Hyperlambda of all snippets matching the specified __[\_arg]__.
 * Optionally pass in __[type]__ of snippet being e.g. _"page"_ or _"startup"_.
 * The snippet(s) Hyperlambda will be found in a __[content]__ return node.
 * One __[content]__ for each snippet matching criteria will be returned to caller.
 */
create-event:hypereval.snippets.load

  /*
   * Separating arguments from the rest of the lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
  micro.lambda.contract.optional:x:/..
    type:string

  /*
   * Checking if caller supplied an (optional) [type] declaration.
   */
  _type-where
  if:x:/@.signal/--/type

    /*
     * Caller supplied an optional [type] declaration.
     *
     * Making sure we further parametrize SQL with requested [type].
     */
    set:x:/@_type-where?value
      src:"and type = @type"
    add:x:/../*/p5.mysql.connect/*/for-each/*/p5.mysql.select
      src
        @type:x:/@.signal/--/type?value

  /*
   * Opening up database connection, selecting snippet, and returning its content
   * as [content] to caller.
   */
  p5.mysql.connect:[hypereval]

    /*
     * Looping through each [_arg] specified by caller, and concatenating into
     * [_result].
     */
    for-each:x:/../*/_arg?value

      /*
       * Selecting currently iterated snippet.
       */
      p5.mysql.select:@"select content, name from snippets where name = @name {0}"
        :x:/@_type-where?value
        @name:x:/@_dp?value

      /*
       * Making sure that snippet actually exists.
       */
      if:x:/@p5.mysql.select/*
        not
        throw:The snippet '{0}' doesn't exist
          :x:/@_dp?value

      /*
       * Making sure we return currently iterated snippet's Hyperlambda
       * as [content] back to caller.
       */
      set:x:/+2/*/*?name
        src:x:/@p5.mysql.select/*/*/name?value
      eval-x:x:/+/*/*
      add:x:/../*/return
        src
          foo:x:/@p5.mysql.select/*/*/content?value

  /*
   * Returning snippet to caller.
   */
  return
