
/*
 * Retrieves the named snippet's Hyperlambda.
 *
 * This event will return the Hyperlambda of the [_arg] snippet.
 * Optionally pass in [type] of snippet being e.g. "page" or "startup".
 */
create-event:hypereval.snippets.get

  /*
   * Separating arguments from the rest of the lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
  micro.lambda.contract.optional:x:/..
    type:string

  /*
   * Checking if caller supplied an (optional) [type] declaration.
   */
  _type-where
  if:x:/@.signal/--/type

    /*
     * Caller supplied an optional [type] declaration.
     *
     * Making sure we further parametrize SQL with requested type.
     */
    set:x:/@_type-where?value
      src:"and type = @type"
    add:x:/../*/p5.mysql.connect/*/p5.mysql.scalar
      src
        @type:x:/@.signal/--/type?value

  /*
   * Opening up database connection, selecting snippet, and returning its content
   * to caller.
   */
  p5.mysql.connect:[hypereval]
    p5.mysql.scalar:@"select content from snippets where name = @name {0}"
      :x:/@_type-where?value
      @name:x:/../*/_arg?value

    /*
     * Making sure that snippet actually exists.
     */
    if:x:/@p5.mysql.scalar?value
      not
      throw:No such snippet

    /*
     * Returning snippet to caller.
     */
    return:x:/@p5.mysql.scalar?value
