
/*
 * Creates search for snippet Active Event.
 *
 * This event will allow you to search for snippets.
 *
 * Optionally pass in [_arg], [type], [content], [limit] and/or [offset] to further parametrize your query.
 *
 * If you pass in [_arg] then the name of the snippet must contain your query.
 * If you pass in [content], then the snippet's content must contain your query.
 */
create-event:hypereval.snippets.search

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.optional:x:/..
    _arg:string
    content:string
    type:string
    offset:long
    limit:long

  /*
   * Default arguments.
   */
  .defaults
    offset:long:0
    limit:int:10

  /*
   * Making sure we check if caller supplied a [type] argument, and accommodating 
   * for it if it was supplied.
   */
  _where
  if:x:/../*/type?value

    /*
     * Caller provided a [type] argument, making sure we further parametrize SQL
     * to accommodate for [type] criteria.
     */
    set:x:/@_where?value
      src:"and type = @type"
    add:x:/../*/p5.mysql.connect/*/p5.mysql.select
      src
        @type:x:/../*/type?value

  /*
   * Opening up database connection.
   */
  p5.mysql.connect:[hypereval]

    /*
     * Selecting all snippets matching the specified criteria.
     *
     * Making sure we use a "like" SQL criteria.
     */
    p5.mysql.select:@"select name, type from snippets where name like @name and content like @content {0} limit @limit offset @offset"
      :x:/@_where?value
      @name:%{0}%
        :x:/../*/_arg?value
      @content:%{0}%
        :x:/../*/content?value
      @offset:x:(/../*/offset|/@.defaults/*/offset)/$?value.long
      @limit:x:(/../*/limit|/@.defaults/*/limit)/$?value.long

    /*
     * Returning the full name and type of all snippets matching the specified criteria
     * to caller.
     */
    for-each:x:/@p5.mysql.select/*
      set:x:/+2/*/*?name
        src:x:/@_dp/#/*/name?value
      eval-x:x:/+/*/*
      add:x:/../*/return
        src
          foo:x:/@_dp/#/*/type?value
  return
