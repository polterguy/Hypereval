/*
 * Creates our __[hypereval.snippets.search]__ Active Event that allows you
 * to search for snippet(s) in your Hypereval database.
 *
 * Optionally pass in __[\_arg]__, __[type]__, __[content]__, __[limit]__ and/or __[offset]__ to
 * further parametrize your query. If you pass in __[\_arg]__ the name of the snippet
 * must contain your query. If you pass in __[content]__ the snippet's content must
 * contain your query.
 *
 * This event will by default return the 10 first snippets matching your query,
 * but this can be changed by providing an explicit __[limit]__ and/or an __[offset]__
 * criteria. __Notice__, you don't have to provide neither an __[\_arg]__ criteria, nor
 * a __[content]__ criteria, at which point the first 'n' snippets will be returned,
 * without any filtering occurring. You can also do a wildcard search by adding _'%'_
 * as a wildcard and _'\_'_ as a single widlcard character substitution(s).
 */
create-event:hypereval.snippets.search

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.optional:x:/..
    _arg:string
    content:string
    type:string
    offset:long
    limit:long

  /*
   * Default arguments.
   */
  .defaults
    offset:long:0
    limit:int:10

  /*
   * Checking if caller provided an [_arg] argument, at which point we
   * further parametrize our SQL.
   */
  _where-name
  if:x:/../*/_arg?value

    /*
     * Caller provided a [content] criteria.
     * Making sure 
     */
    set:x:/@_where-name?value
      src:name like @name
    add:x:/../*/p5.mysql.connect/*/p5.mysql.select
      src
        @name:x:/../*/_arg?value

  /*
   * Checking if caller provided a [type] argument, at which point we
   * further parametrize our SQL.
   */
  _where-type
  if:x:/../*/type?value

    /*
     * Caller provided a [type] argument. 
     * Making sure we further parametrize SQL
     * to accommodate for [type] criteria.
     */
    set:x:/@_where-type?value
      src:type = @type
    add:x:/../*/p5.mysql.connect/*/p5.mysql.select
      src
        @type:x:/../*/type?value

  /*
   * Checking if caller provided a [content] argument, at which point we
   * further parametrize our SQL.
   */
  _where-content
  if:x:/../*/content?value

    /*
     * Caller provided a [content] criteria.
     * Making sure we further parametrize our SQL.
     */
    set:x:/@_where-content?value
      src:content like @content
    add:x:/../*/p5.mysql.connect/*/p5.mysql.select
      src
        @content:x:/../*/content?value

  /*
   * Checking if one or more criteria were provided.
   */
  _where
  for-each:x:/../*(/_where-name|/_where-type|/_where-content)?value
    if:x:/@_dp?value
      if:x:/@_where?value
        set:x:/@_where?value
          src:"{0} and {1}"
            :x:/@_where?value
            :x:/@_dp?value
      else
        set:x:/@_where?value
          src:" where {0}"
            :x:/@_dp?value

  /*
   * Opening up database connection.
   */
  p5.mysql.connect:[hypereval]

    /*
     * Executing our SQL.
     */
    p5.mysql.select:@"select name, type from snippets{0} limit @limit offset @offset"
      :x:/@_where?value
      @offset:x:(/../*/offset|/@.defaults/*/offset)/$?value.long
      @limit:x:(/../*/limit|/@.defaults/*/limit)/$?value.long

    /*
     * Returning the full name and type of all snippets matching the specified criteria
     * to caller.
     */
    for-each:x:/@p5.mysql.select/*
      set:x:/+2/*/*?name
        src:x:/@_dp/#/*/name?value
      eval-x:x:/+/*/*
      add:x:/../*/return
        src
          foo:x:/@_dp/#/*/type?value
  return
