
/*
 * Creates evaluate snippet Active Event.
 *
 * This event will allow you to evaluate a snippet by name.
 * Pass in the name of the snippet(s) you want to evaluate as [_arg].
 * Optionally pass in [type] being for instance "page" or "startup".
 */
create-event:hypereval.snippets.evaluate

  /*
   * Separating arguments from the rest of the lambda.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
  micro.lambda.contract.optional:x:/..
    type:string

  /*
   * Loading snippet(s).
   */
  add:x:/+
    src:x:/@.signal/--/<-(/type|/_arg)
  hypereval.snippets.load

  /*
   * Looping through each result, converting snippet to Hyperlambda,
   * passing in all arguments (except [_arg] and [type]), and evaluating snippet.
   */
  for-each:x:/@hypereval.snippets.load/*?value

    /*
     * Converting currently iterated snippet Hyperlambda to a lambda object.
     */
    hyper2lambda:x:/@_dp?value

    /*
     * Adding all arguments to snippet, except [_arg] and [type], which are
     * criteria to the load snippet mechanism.
     */
    add:x:/+
      src:x:/@.signal/--(!/_arg!/type)
    eval:x:/@hyper2lambda

    /*
     * Making sure we return the results of evaluation back to caller of
     * currently iterated snippet, if anything.
     */
    set:x:/../*/return?value
      src:x:/@eval?value
    add:x:/../*/return
      src:x:/@eval/*

  /*
   * Returning results to caller.
   */
  return
