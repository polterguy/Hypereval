/*
 * Creates the Hypereval CodeMirror evaluator extension widget.
 *
 * This is most of the entire Hypereval app, allowing the user to load, evaluate,
 * and save snippets, etc.
 *
 * The only parts that are not embedded in this widget from the Hypereval app is
 * the export, upload, and download buttons in Hypereval's top toolbar.
 *
 * Notice, we only allow one instance of this widget per page.
 */
create-event:hypereval.widgets.eval

  /*
   * Used to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Checking if Hypereval is already running, and if so, throwing an exception.
   */
  if
    hypereval.widgets.eval.is-running
    throw:Hypereval is already open

  /*
   * Decorating widget with arguments.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--/<-(!/_arg)

  /*
   * Returning widget to caller, making sure we forward evaluate all relevant arguments.
   */
  return
    container
      events


        /*
         * Returns true if Hypereval is already running on page.
         */
        hypereval.widgets.eval.is-running

          /*
           * Simply returning true to caller, since (obviously) Hypereval
           * is running.
           */
          return:bool:true


        /*
         * Helper event to programmatically evaluate whatever is in the CodeMirror editor.
         */
        hypereval.widgets.eval.evaluate

          /*
           * Retrieving Hyperlambda and evaluating it.
           *
           * Notice, we might want to show the results of evaluation in our output
           * CodeMirror editor after evaluation. Hence, we'll need to use [eval-mutable],
           * and apply some "eval trickery" here to be able to accomplish that.
           *
           * We do this by adding the lambda object into a reference node, which is
           * necessary to be able to use [eval-mutable], and still have the main root
           * node being the root node for our evaluation.
           *
           * First we retrieve code, and convert it to a lambda object.
           */
          hypereval.widgets.eval.get-code
          hyper2lambda:x:/@hypereval.widgets.eval.get-code?value

          /*
           * Then we append the lambda into a "reference node", which will allow us
           * to retrieve the lambda as it is after evaluation, while still having
           * our root node being the root node for our [eval-mutable] invocation.
           *
           * Notice, since reference nodes are shallow copies, we'll need to first
           * delete the results of any previous invocations to it.
           * Otherwise the operation will accumulate all nodes from any previous
           * evaluations.
           */
          .exe:node:"exe"
          set:x:/@.exe/#/*

          /*
           * Adding above lambda into reference node above.
           */
          add:x:/@.exe/#
            src:x:/@hyper2lambda/*

          /*
           * Evaluating reference node, now containing our lambda object.
           */
          eval-mutable:x:/@.exe/#

          /*
           * Then converting lambda result to Hyperlambda, and returning back to client as JSON
           */
          lambda2hyper:x:/@.exe/#/*

          /*
           * Checking if output widget is visible, and if so, making sure we set the results
           * of evaluation.
           */
          if
            fetch:x:/0/0/0?value
              get-widget-property:hypereval-output-wrapper
                visible

            /*
             * "Output" CodeMirror widget is visible.
             *
             * Setting the results of our evaluation, and making sure we refetch the
             * code into CodeMirror editor on the client side of things.
             */
            eval-x:x:/+/*
            micro.widgets.codemirror.set-value:hypereval-output
              content:x:/@lambda2hyper?value


        /*
         * Helper event to preview whatever page snippet is currently loaded.
         *
         * Will only function correctly if currently loaded snippet is of type "page".
         */
        hypereval.widgets.eval.preview

          /*
           * Previewing "current snippet" in a new window.
           *
           * First we need to retrieve the name of the currently active snippet.
           */
          p5.web.session.get:hypereval.snippet-name

          /*
           * Then we need to URL encode the snippet's name.
           */
          p5.html.url-encode:x:/@p5.web.session.get/*?value

          /*
           * Figuring out root folder for Hypereval, to parametrize our
           * JavaScript "window.open" invocation accordingly.
           */
          p5.io.unroll-path:@HYPEREVAL/
          split:x:/@p5.io.unroll-path?value
            =:/

          /*
           * Opening a window on the client side with the URL leading to our page snippet.
           */
          p5.web.send-javascript:@"window.open('/{0}/{1}');"
            :x:/@split/0/-?name
            :x:/@p5.html.url-encode?value


        /*
         * Helper event to toggle visibility of output widget.
         */
        hypereval.widgets.eval.toggle-output

          /*
           * Checking if output CodeMirror editor is already visible.
           */
          get-widget-property:hypereval-output-wrapper
            visible
          if:x:/@get-widget-property/*/*?value

            /*
             * Hiding "output" widget.
             */
            set-widget-property:hypereval-output-wrapper
              visible:false

          else

            /*
             * Showing "output" widget.
             */
            set-widget-property:hypereval-output-wrapper
              visible:true


        /*
         * Helper method to programmatically load the named snippet.
         *
         * Expects [_arg] to have snippet's name.
         */
        hypereval.widgets.eval.load-snippet

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Using API method to make it simple.
           */
          hypereval.snippets.load:x:/../*/_arg?value

          /*
           * Modifying textarea's and CodeMirror's values.
           */
          hypereval.widgets.eval.set-code:x:/@hypereval.snippets.load/*?value

          /*
           * Storing the snippet's name in our session.
           *
           * This is done to make it easier to save snippet after modifications
           * have been applied, by default decorating the snippet's filename and type,
           * to whatever it was previously.
           */
          p5.web.session.set:hypereval.snippet-name
            src:x:/../*/_arg?value

          /*
           * Enabling delete snippet button.
           */
          delete-widget-property:hypereval-delete-snippet
            disabled

          /*
           * Invoking event responsible for updating our header, passing in the
           * name of the recently loaded snippet.
           */
          hypereval.set-header:x:/../*/_arg?value

          /*
           * Signaling that current snippet was changed.
           */
          hypereval.widgets.eval.active-snippet-changed


        /*
         * Helper method to programmatically save the current snippet.
         *
         * Expects [_arg] to have snippet's name and [type] being type of snippet.
         */
        hypereval.widgets.eval.save-snippet

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
            type:string

          /*
           * Retrieving CodeMirror editor's value.
           */
          micro.widgets.codemirror.get-value:hypereval-input

          /*
           * Inserting snippet into database.
           */
          eval-x:x:/+/*
          hypereval.snippets.save:x:/../*/_arg?value
            type:x:/../*/type?value
            content:x:/@micro.widgets.codemirror.get-value/*?value

          /*
           * Making sure we store name used is session, in case
           * user wants to save the same snippet again.
           */
          p5.web.session.set:hypereval.snippet-name
            src:x:/../*/_arg?value

          /*
           * Invoking event responsible for updating our header.
           */
          hypereval.set-header:x:/../*/_arg?value

          /*
           * Making sure we enable "delete snippet button",
           * since there is an active snippet now.
           */
          delete-widget-property:hypereval-delete-snippet
            disabled

          /*
           * Signaling that snippet was changed.
           */
          hypereval.widgets.eval.active-snippet-changed

          /*
           * Providing some feedback to user.
           */
          micro.windows.info:Snippet was successfully saved
            class:micro-windows-info success


        /*
         * Returns the current code from CoreMirror editor.
         */
        hypereval.widgets.eval.get-code

          /*
           * Retrieving CodeMirror editor's content to caller.
           */
          micro.widgets.codemirror.get-value:hypereval-input
          return:x:/@micro.widgets.codemirror.get-value/*?value


        /*
         * Sets the current current CodeMirror editor's code to the given [_arg].
         */
        hypereval.widgets.eval.set-code

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.optional:x:/..
            _arg:string

          /*
           * Sanity checking code, if there was any code given, to make sure 
           * it's actually a valid piece of Hyperlambda.
           *
           * Notice, this invocation will throw an exception if code is not valid Hyperlambda.
           */
          if:x:/../*/_arg?value
            hyper2lambda:x:/../*/_arg?value

          /*
           * Updates value of input CodeMirror editor.
           */
          eval-x:x:/+/*
          micro.widgets.codemirror.set-value:hypereval-input
            content:x:/../*/_arg?value


        /*
         * Returns current snippet, if any.
         *
         * Will return [content], [type] and [name].
         * Unless the snippet has been saved to the database, the [type] will
         * default to "snippet" and the [name] will default to "hypereval".
         */
        hypereval.widgets.eval.get-current-snippet

          /*
           * Retrieving Hyperlambda from CodeMirror editor.
           */
          micro.widgets.codemirror.get-value:hypereval-input

          /*
           * Checking to see if this is a saved snippet, at which point we
           * also return its [type] and [name].
           *
           * The [type] and [name] values have the default values of "hypereval" and "snippet"
           * if the snippet is not saved into our database.
           */
          .defaults
            hypereval.snippet-name:hypereval
            type:snippet

          /*
           * Checking if snippet has been saved to database.
           */
          p5.web.session.get:hypereval.snippet-name
          if:x:/@p5.web.session.get/*?value

            /*
             * This is a saved snippet, making sure we retrieve its [type].
             */
            p5.mysql.connect:[hypereval]

              /*
               * Selecting type from snippets table.
               */
              p5.mysql.scalar:select type from snippets where name = @name
                @name:x:/@p5.web.session.get/*?value

              /*
               * Modifying above [.defaults]/[type] accordingly.
               */
              set:x:/@.defaults/*/type?value
                src:x:/@p5.mysql.scalar?value


          /*
           * Returning snippet to caller.
           */
          eval-x:x:/+/*
          return
            content:x:/@micro.widgets.codemirror.get-value/*?value
            name:x:(/@p5.web.session.get/*/hypereval.snippet-name|/@.defaults/*/hypereval.snippet-name)/$?value
            type:x:/@.defaults/*/type?value


        /*
         * Helper event to programmatically open load snippet window.
         */
        hypereval.widgets.eval.show-load-window

          /*
           * To make it simple, we simply "click" "load snippet button" programmatically.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/load-snippet.hl


        /*
         * Helper event to programmatically open save snippet window.
         */
        hypereval.widgets.eval.show-save-window

          /*
           * To make it simple, we simply "click" "load snippet button" programmatically.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/save-snippet.hl


        /*
         * Helper event to programmatically open delete snippet window.
         */
        hypereval.widgets.eval.show-delete-window

          /*
           * To make it simple, we simply "click" "load snippet button" programmatically.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/delete-snippet.hl


        /*
         * Helper event to download current code snippet.
         */
        hypereval.widgets.eval.download-current-snippet

          /*
           * Retrieving snippet's Hyperlambda [content], [type] and [name].
           */
          hypereval.widgets.eval.get-current-snippet

          /*
           * Creating a temporary file which will contain the Hyperlambda
           * from our CodeMirror widget.
           */
          save-file:~/temp/hypereval-code.hl
            src:x:/@hypereval.widgets.eval.get-current-snippet/*/content?value

          /*
           * Making sure we get the "Content-Disposition" (filename) correct.
           */
          eval-x:x:/+/*/Content-Disposition

          /*
           * Downloading file to client.
           */
          micro.download.file:~/temp/hypereval-code.hl
            Content-Type:x-application/hyperlambda
            Content-Disposition:@"attachment; filename=""{0}.{1}.hl"""
              :x:/@hypereval.widgets.eval.get-current-snippet/*/name?value
              :x:/@hypereval.widgets.eval.get-current-snippet/*/type?value


        /*
         * Helper event to import a list of [files].
         */
        hypereval.widgets.eval.import-files

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.min:x:/..
            files

          /*
           * Invoking file responsible for handling our upload request.
           */
          add:x:/../*/micro.evaluate.file
            src:x:/../*/files
          micro.evaluate.file:@HYPEREVAL/helpers/import-files.hl

          /*
           * Providing feedback to user.
           */
          micro.windows.info:{0} snuppets successfully imported
            :x:/@micro.evaluate.file?value
            class:micro-windows-info success


        /*
         * Helper event to allow user to create a new snippet.
         *
         * Will allow user to select a snippet template from the list of files existing
         * in our "/template/" folder, or alternatively create an entirely empty snippet.
         */
        hypereval.widgets.eval.new-snippet

          /*
           * Allowing our "new snippet Hyperlambda file" do the heavy lifting.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/new-snippet.hl


      widgets

        /*
         * CodeMirror "input" widget.
         */
        micro.widgets.codemirror:hypereval-input
          auto-focus:true
          height:400px
          oninit

            /*
             * Checking if we have previously loaded a snippet in the current session,
             * and if so, making sure we reload it for convenience.
             */
            p5.web.session.get:hypereval.snippet-name
            if:x:/@p5.web.session.get/*?value
              hypereval.widgets.eval.load-snippet:x:/@p5.web.session.get/*?value

          keys
            Alt-E:p5.$('hypereval-evaluate-snippet').raise('onclick')
            Alt-V:p5.$('hypereval-view-output').raise('onclick')
            Alt-S:p5.$('hypereval-save-snippet').raise('onclick')
            Alt-L:p5.$('hypereval-load-snippet').raise('onclick')
            Alt-D:p5.$('hypereval-delete-snippet').raise('onclick')
            Alt-N:p5.$('hypereval-new-snippet').raise('onclick')
            Alt-P:p5.$('hypereval-preview-snippet').raise('onclick')

        /*
         * Toolbars wrapper.
         */
        div
          class:right air-top
          widgets

            /*
             * Extra toolbar buttons, for loading snippets, saving snippets, etc.
             */
            micro.widgets.file
              folder:@HYPEREVAL/helpers/bottom-extra-toolbar-buttons/
              class:strip
              style:"margin-right:1rem;"

            /*
             * Main toolbars, for evaluating Hyperlambda, etc.
             */
            micro.widgets.file
              folder:@HYPEREVAL/helpers/bottom-toolbar-buttons/
              class:strip

        /*
         * CodeMirror "output" wrapper.
         *
         * Notice, we'll need to wrap it in a wrapper widget, such that we are
         * able to toggle its visibility correctly.
         *
         */
        div:hypereval-output-wrapper
          visible:false
          widgets
            micro.widgets.codemirror:hypereval-output
              height:200px
              read-only:true
