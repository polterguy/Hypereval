
/*
 * Responsible for creating the Hypereval CodeMirror evaluator widget.
 */
create-event:hypereval.widgets.eval

  /*
   * Used to separate arguments from the rest of our lambda.
   */
  .signal

  /*
   * Checking if Hypereval is already running, and if so, throwing an exception.
   */
  if
    hypereval.widgets.eval.is-running
    throw:Hypereval is already running

  /*
   * Figuring out font size to use for widget.
   */
  .defaults
    font-size:9.25
    theme:phosphorus
    line-numbers:bool:true
  p5.auth.my-settings.get

  /*
   * Decorating widget with arguments.
   */
  add:x:/../*/return/*/container
    src:x:/@.signal/--/<-(!/_arg)

  /*
   * Returning widget to caller.
   */
  eval-x:x:/+/**(/.theme|/.line-numbers|/.chrome)|/+/*/container/*/style
  return
    container
      style:"font-size:{0}pt !important;"
        :x:(/@p5.auth.my-settings.get/*/codemirror/*/font-size|/../*/.defaults/*/font-size)/$?value
      events


        /*
         * Returns true if Hypereval is already running on page.
         */
        hypereval.widgets.eval.is-running

          /*
           * Simply returning true to caller, since (obviously) Hypereval
           * is running.
           */
          return:bool:true


        /*
         * Helper method to programmatically load the named snippet.
         *
         * Expects [_arg] to have snippet's name.
         */
        hypereval.widgets.eval.load-snippet

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.min:x:/..
            _arg:string

          /*
           * Using API method to make it simple.
           */
          hypereval.snippets.load:x:/../*/_arg?value

          /*
           * Modifying textarea's and CodeMirror's values.
           */
          hypereval.widgets.eval.set-code:x:/@hypereval.snippets.load/*?value

          /*
           * Storing the snippet's name in our session.
           */
          p5.web.session.set:hypereval.snippet-name
            src:x:/../*/_arg?value

          /*
           * Enabling delete snippet button.
           */
          delete-widget-property:hypereval-delete-snippet
            disabled

          /*
           * Invoking event responsible for updating our header.
           */
          hypereval.set-header:x:/../*/_arg?value

          /*
           * Signaling that current snippet was changed.
           */
          hypereval.widgets.eval.active-snippet-changed


        /*
         * Helper method to programmatically save the current snippet.
         *
         * Expects [_arg] to have snippet's name and [type] being type of snippet.
         */
        hypereval.widgets.eval.save-snippet

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.min:x:/..
            _arg:string
            type:string

          /*
           * Verifying there actually is any code.
           */
          get-widget-property:hypereval-input
            innerValue

          /*
           * Inserting snippet into database.
           */
          eval-x:x:/+/*
          hypereval.snippets.save:x:/../*/_arg?value
            type:x:/../*/type?value
            content:x:/@get-widget-property/*/*?value

          /*
           * Making sure we store name used is session, in case
           * user wants to save the same snippet again.
           */
          p5.web.session.set:hypereval.snippet-name
            src:x:/../*/_arg?value

          /*
           * Invoking event responsible for updating our header.
           */
          hypereval.set-header:x:/../*/_arg?value

          /*
           * Making sure we enable "delete snippet button",
           * since there is an active snippet now.
           */
          delete-widget-property:hypereval-delete-snippet
            disabled

          /*
           * Signaling that snippet was changed.
           */
          hypereval.widgets.eval.active-snippet-changed

          /*
           * Providing some feedback to user.
           */
          micro.windows.info:Snippet was successfully saved
            class:micro-windows-info success


        /*
         * Returns the current code from CoreMirror editor.
         */
        hypereval.widgets.eval.get-code

          /*
           * Retrieving textarea's content to caller.
           */
          get-widget-property:hypereval-input
            innerValue
          return:x:/@get-widget-property/*/*?value


        /*
         * Sets the current current CodeMirror editor's code to the given [_arg].
         */
        hypereval.widgets.eval.set-code

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.optional:x:/..
            _arg:string

          /*
           * Sanity checking code, if there was any code given, to make sure 
           * it's actually a valid piece of Hyperlambda.
           *
           * Notice, this invocation will throw an exception if code is not valid Hyperlambda.
           */
          if:x:/../*/_arg?value
            hyper2lambda:x:/../*/_arg?value

          /*
           * Retrieving textarea's content to caller.
           */
          set-widget-property:hypereval-input
            innerValue:x:/../*/_arg?value
          p5.web.send-javascript:@"p5.hypereval_input.getDoc().setValue(p5.$('hypereval-input').el.value);"


        /*
         * Returns current snippet, if any.
         *
         * Will return [content], [type] and [name].
         * Unless the snippet has been saved to the database, the [type] will
         * default to "snippet" and the [name] will default to "hypereval".
         */
        hypereval.widgets.eval.get-current-snippet

          /*
           * Retrieving Hyperlambda from CodeMirror editor.
           */
          get-widget-property:hypereval-input
            innerValue

          /*
           * Checking to see if this is a saved snippet, at which point we
           * also return its [type] and [name].
           *
           * The [type] and [name] values have the default values of "hypereval" and "snippet"
           * if the snippet is not saved into our database.
           */
          .defaults
            hypereval.snippet-name:hypereval
            type:snippet

          /*
           * Checking if snippet has been saved to database.
           */
          p5.web.session.get:hypereval.snippet-name
          if:x:/@p5.web.session.get/*?value

            /*
             * This is a saved snippet, making sure we retrieve its [type].
             */
            p5.mysql.connect:[hypereval]

              /*
               * Selecting type from snippets table.
               */
              p5.mysql.scalar:select type from snippets where name = @name
                @name:x:/@p5.web.session.get/*?value

              /*
               * Modifying above [.defaults]/[type] accordingly.
               */
              set:x:/@.defaults/*/type?value
                src:x:/@p5.mysql.scalar?value


          /*
           * Returning snippet to caller.
           */
          eval-x:x:/+/*
          return
            content:x:/@get-widget-property/*/*?value
            name:x:(/@p5.web.session.get/*/hypereval.snippet-name|/@.defaults/*/hypereval.snippet-name)/$?value
            type:x:/@.defaults/*/type?value


        /*
         * Helper event to programmatically open load snippet window.
         */
        hypereval.widgets.eval.show-load-window

          /*
           * To make it simple, we simply "click" "load snippet button" programmatically.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/load-snippet.hl


        /*
         * Helper event to programmatically open save snippet window.
         */
        hypereval.widgets.eval.show-save-window

          /*
           * To make it simple, we simply "click" "load snippet button" programmatically.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/save-snippet.hl


        /*
         * Helper event to download current code snippet.
         */
        hypereval.widgets.eval.download-current-snippet

          /*
           * Retrieving snippet's Hyperlambda [content], [type] and [name].
           */
          hypereval.widgets.eval.get-current-snippet

          /*
           * Creating a temporary file which will contain the Hyperlambda
           * from our CodeMirror widget.
           */
          save-file:~/temp/hypereval-code.hl
            src:x:/@hypereval.widgets.eval.get-current-snippet/*/content?value

          /*
           * Making sure we get the "Content-Disposition" (filename) correct.
           */
          eval-x:x:/+/*/Content-Disposition

          /*
           * Downloading file to client.
           */
          micro.download.file:~/temp/hypereval-code.hl
            Content-Type:x-application/hyperlambda
            Content-Disposition:@"attachment; filename=""{0}.{1}.hl"""
              :x:/@hypereval.widgets.eval.get-current-snippet/*/name?value
              :x:/@hypereval.widgets.eval.get-current-snippet/*/type?value


        /*
         * Helper event to import a list of [files].
         */
        hypereval.widgets.eval.import-files

          /*
           * Sanity checking arguments.
           */
          micro.lambda.contract.min:x:/..
            files

          /*
           * Invoking file responsible for handling our upload request.
           */
          add:x:/../*/micro.evaluate.file
            src:x:/../*/files
          micro.evaluate.file:@HYPEREVAL/helpers/import-files.hl

          /*
           * Providing feedback to user.
           */
          micro.windows.info:{0} files successfully imported
            :x:/@micro.evaluate.file?value
            class:micro-windows-info success


        /*
         * Helper event to allow user to create a new snippet.
         *
         * Will allow user to select a snippet template from the list of files existing
         * in our "/template/" folder, or alternatively create an entirely empty snippet.
         */
        hypereval.widgets.eval.new-snippet

          /*
           * Allowing our "new snippet Hyperlambda file" do the heavy lifting.
           */
          micro.evaluate.file:@HYPEREVAL/helpers/new-snippet.hl


      oninit

        /*
         * Forward evaluated above.
         */
        .chrome:x:/../*/chrome?value

        /*
         * Including CodeMirror JavaScript, CSS, and JSON AutoComplete.
         */
        micro.widgets.codemirror._include-javascript
        micro.widgets.codemirror._include-css
        micro.widgets.codemirror._include-auto-complete

        /*
         * Including selected theme's CSS file.
         */
        .theme:x:(/@p5.auth.my-settings.get/*/codemirror/*/theme|/../*/.defaults/*/theme)/$?value
        p5.web.include-css-file:@MICRO/media/codemirror/theme/{0}.css
          :x:/@.theme?value

        /*
         * Transforming input textarea to CodeMirror instance.
         */
        .line-numbers:x:(/@p5.auth.my-settings.get/*/codemirror/*/line-numbers|/../*/.defaults/*/line-numbers)/$?value
        set:x:/-?value
          to-lower:x:/./-?value.string
        p5.io.unroll-path:@HYPEREVAL/
        p5.web.send-javascript:@"p5.hypereval_input = CodeMirror.fromTextArea(p5.$('hypereval-input').el, {{
  mode:'hyperlambda',
  theme:'{0}',
  lineNumbers:{1},
  styleActiveLine:true,
  path:'{2}/media/codemirror/',
  autofocus:true,
  tabSize:2,
  indentAuto:true,
  autoCloseBrackets:true,
  showTrailingSpace:true,
  extraKeys: {{
    'Ctrl-Space':'autocomplete',
    'Shift-Tab':'indentLess',
    'Tab':'indentMore',
    'Alt-F': 'findPersistent',
    'Alt-M':function(cm) {{cm.setOption('fullScreen', !cm.getOption('fullScreen'));}},
    'Alt-E':function(cm) {{
      p5.$('hypereval-evaluate-snippet').raise('onclick', {{
        onsuccess:function(ret, evt) {{
          if (ret.code) {{
            p5.hypereval_output.getDoc().setValue(ret.code);
          }}
        }}
      }});
    }},
    'Alt-V':function(cm) {{p5.$('hypereval-view-output').raise('onclick');}},
    'Alt-S':function(cm) {{p5.$('hypereval-save-snippet').raise('onclick');}},
    'Alt-L':function(cm) {{p5.$('hypereval-load-snippet').raise('onclick');}},
    'Alt-D':function(cm) {{p5.$('hypereval-delete-snippet').raise('onclick');}},
    'Alt-N':function(cm) {{p5.$('hypereval-new-snippet').raise('onclick');}},
    'Alt-P':function(cm) {{p5.$('hypereval-preview-snippet').raise('onclick');}}
}}
}});
p5.hypereval_input.on('change',function (cMirror) {{
  p5.$('hypereval-input').el.value = cMirror.getValue();
}});
p5.hypereval_input.setSize('100%', '400px');"
          :x:/@.theme?value
          :x:/@.line-numbers?value
          :x:/@p5.io.unroll-path?value

      widgets
        literal:hypereval-input
          element:textarea
          style:"display:none;"
        div
          class:right air-top
          widgets:bottom-toolbars
          widgets

            /*
             * Extra toolbar buttons, for loading snippets, saving snippets, etc.
             */
            micro.widgets.file
              folder:@HYPEREVAL/helpers/bottom-extra-toolbar-buttons/
              class:strip
              style:"margin-right:1rem;"

            /*
             * Main toolbars, for evaluating Hyperlambda, etc.
             */
            micro.widgets.file
              folder:@HYPEREVAL/helpers/bottom-toolbar-buttons/
              class:strip


        div:hypereval-output-wrapper
          visible:false
          style:"clear:both;"
          widgets
            literal:hypereval-output
              element:textarea
              oninit

                /*
                 * Notice, since the output widget might be invisible, we defer
                 * initializing it until it becomes visible.
                 * Default values.
                 */
                .defaults
                  font-size:9.25
                  theme:phosphorus
                  line-numbers:bool:true

                /*
                 * Retrieving settings for widget.
                 */
                p5.auth.my-settings.get
                .line-numbers:x:(/@p5.auth.my-settings.get/*/codemirror/*/line-numbers|/@.defaults/*/line-numbers)/$?value
                set:x:/-?value
                  to-lower:x:/./-?value.string

                /*
                 * Transforming output textarea to CodeMirror instance.
                 */
                p5.io.unroll-path:@MICRO/
                p5.web.send-javascript:@"p5.hypereval_output = CodeMirror.fromTextArea(p5.$('hypereval-output').el, {{
  mode:'hyperlambda',
  theme:'{0}',
  lineNumbers:{1},
  styleActiveLine:true,
  path:'{2}/media/codemirror/',
  tabSize:2,
  indentAuto:true,
  readOnly:true
}});"
                  :x:(/@p5.auth.my-settings.get/*/codemirror/*/theme|/../*/.defaults/*/theme)/$?value
                  :x:/@.line-numbers?value
                  :x:/@p5.io.unroll-path?value
